/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazGrafica;

import Contenedor.Calendario;
import Contenedor.Contenedor;
import java.io.*;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Antonio
 */
public class SimulacionAuto extends javax.swing.JDialog {

        Contenedor liga;
        Calendario aux = new Calendario();
        static final String URL = "http://eso-liga.foro.ag/privmsg?folder=inbox";

        /**
         * Creates new form SimulacionAuto
         */
        public SimulacionAuto(java.awt.Frame parent, boolean modal, Contenedor liga) {
                super(parent, modal);
                initComponents();
                this.liga = liga;
                for (Calendario c : liga.getCalendarios()) {
                        jCompeticiones.addItem(c.getNombre());
                }
        }

        /**
         * This method is called from within the constructor to
         * initialize the form. WARNING: Do NOT modify this code. The
         * content of this method is always regenerated by the Form
         * Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jSimular = new javax.swing.JButton();
                jCompeticiones = new javax.swing.JComboBox<>();
                jJornadas = new javax.swing.JComboBox<>();
                jLabel1 = new javax.swing.JLabel();
                jLabel2 = new javax.swing.JLabel();
                jCopiarAlis = new javax.swing.JButton();

                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
                getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

                jSimular.setText("Simular");
                jSimular.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jSimularActionPerformed(evt);
                        }
                });
                getContentPane().add(jSimular, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 190, -1, -1));

                jCompeticiones.addItemListener(new java.awt.event.ItemListener() {
                        public void itemStateChanged(java.awt.event.ItemEvent evt) {
                                jCompeticionesItemStateChanged(evt);
                        }
                });
                getContentPane().add(jCompeticiones, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 200, -1));

                getContentPane().add(jJornadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 120, 100, 20));

                jLabel1.setText("Elige la competicion");
                getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, -1, -1));

                jLabel2.setText("Elige la jornada");
                getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 90, 110, -1));

                jCopiarAlis.setText("Copiar Alineaciones");
                jCopiarAlis.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                jCopiarAlisActionPerformed(evt);
                        }
                });
                getContentPane().add(jCopiarAlis, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 40, -1, -1));

                pack();
        }// </editor-fold>//GEN-END:initComponents

    private void jCompeticionesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCompeticionesItemStateChanged
                Iterator it = liga.getCalendarios().iterator();
                aux = new Calendario();
                boolean encontrado = false;
                while (it.hasNext() && !encontrado) {
                        aux = (Calendario) it.next();
                        if (aux.getNombre().equals(jCompeticiones.getSelectedItem().toString())) {
                                encontrado = true;
                        }
                }
                if (encontrado) {
                        jJornadas.removeAllItems();
                        for (int i = 1; i <= aux.getCalendario().size(); i++) {
                                String res = i + "";
                                jJornadas.addItem(res);
                        }
                }
    }//GEN-LAST:event_jCompeticionesItemStateChanged

    private void jSimularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSimularActionPerformed
                int jornada = jJornadas.getSelectedIndex();
                for (String[] encuentro : aux.getJornada(jornada)) {
                        File dir = new File("Simulador.exe");
                        if (dir.exists()) {
                                try {
                                        ProcessBuilder pB = new ProcessBuilder("Reiniciar árbitros.exe");
                                        pB.redirectErrorStream(true);
                                        Process p = pB.start();
                                        p.waitFor(1, TimeUnit.MILLISECONDS);
                                        pB = new ProcessBuilder(dir + "");
                                        pB.redirectErrorStream(true);
                                        p = pB.start();
                                        p.waitFor(1, TimeUnit.MILLISECONDS);
                                        OutputStream os = p.getOutputStream();
                                        BufferedWriter bW = new BufferedWriter(new OutputStreamWriter(os));
                                        String input = encuentro[0];
                                        input += "\n";
                                        bW.write(input);
                                        bW.flush();
                                        input = encuentro[1];
                                        input += "\n";
                                        bW.write(input);
                                        bW.flush();
                                        input = "\n";
                                        bW.write(input);
                                        bW.flush();
                                        // Se obtiene el stream de salida del programa
                                        InputStream is = p.getInputStream();

                                        /* Se prepara un bufferedReader para poder leer la salida más comodamente. */
                                        BufferedReader br = new BufferedReader(new InputStreamReader(is));
                                        // Se lee la primera linea
                                        String aux = br.readLine();
                                        FileWriter logSim = new FileWriter("logSimulacion.txt", true);
                                        BufferedWriter bW2 = new BufferedWriter(logSim);
                                        PrintWriter pW = new PrintWriter(bW2);
                                        pW.println(encuentro[0] + " - " + encuentro[1]);
                                        pW.println();
                                        // Mientras se haya leido alguna linea
                                        while (aux != null) {
                                                pW.println(aux);
                                                aux = br.readLine();
                                        }
                                        pW.close();
                                        br.close();
                                        is.close();
                                } catch (IOException ex) {
                                        Logger.getLogger(SimulacionAuto.class.getName()).log(Level.SEVERE, null, ex);
                                } catch (InterruptedException ex) {
                                        Logger.getLogger(SimulacionAuto.class.getName()).log(Level.SEVERE, null, ex);
                                }
                        } else {
                                System.out.println("El fichero no existe");
                        }
                }
    }//GEN-LAST:event_jSimularActionPerformed

        private void jCopiarAlisActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCopiarAlisActionPerformed
                // Compruebo si me da un 200 al hacer la petición
                if (getStatusConnectionCode(URL) == 200) {

                        // Obtengo el HTML de la web en un objeto Document
                        Document document = getHtmlDocument(URL);

                        // Busco todas las entradas que estan dentro de:
                        Elements entradas = document.getElementsByClass("topiclist pmlist bg_none");
                        System.out.println("Número de entradas en la página inicial de Jarroba: " + entradas.size() + "\n");

                        // Paseo cada una de las entradas
                        for (Element elem : entradas) {

                                String titulo = elem.getElementsByClass("tituloPost").text();
                                String autor = elem.getElementsByClass("autor").toString();
                                String fecha = elem.getElementsByClass("fecha").text();

                                System.out.println(titulo + "\n" + autor + "\n" + fecha + "\n\n");

                                // Con el método "text()" obtengo el contenido que hay dentro de las etiquetas HTML
                                // Con el método "toString()" obtengo todo el HTML con etiquetas incluidas
                        }

                } else {
                        System.out.println("El Status Code no es OK es: " + getStatusConnectionCode(URL));
                }
        }//GEN-LAST:event_jCopiarAlisActionPerformed

        public static int getStatusConnectionCode(String url) {
                Response response = null;
                try {
                        response = Jsoup.connect(url).userAgent("Mozilla/5.0").timeout(100000).ignoreHttpErrors(true).execute();
                } catch (IOException ex) {
                        System.out.println("Excepción al obtener el Status Code: " + ex.getMessage());
                }
                return response.statusCode();
        }

        public static Document getHtmlDocument(String url) {

                Document doc = null;
                try {
                        doc = Jsoup.connect(url).userAgent("Mozilla/5.0").timeout(100000).get();
                } catch (IOException ex) {
                        System.out.println("Excepción al obtener el HTML de la página" + ex.getMessage());
                }
                return doc;
        }

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
                /* Set the Nimbus look and feel */
                //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
                /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
                 */
                try {
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                                if ("Nimbus".equals(info.getName())) {
                                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                        break;
                                }
                        }
                } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(SimulacionAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                        java.util.logging.Logger.getLogger(SimulacionAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                        java.util.logging.Logger.getLogger(SimulacionAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                        java.util.logging.Logger.getLogger(SimulacionAuto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                //</editor-fold>

                /* Create and display the dialog */
                java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                                SimulacionAuto dialog = new SimulacionAuto(new javax.swing.JFrame(), true, null);
                                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                                        @Override
                                        public void windowClosing(java.awt.event.WindowEvent e) {
                                                System.exit(0);
                                        }
                                });
                                dialog.setVisible(true);
                        }
                });
        }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JComboBox<String> jCompeticiones;
        private javax.swing.JButton jCopiarAlis;
        private javax.swing.JComboBox<String> jJornadas;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JButton jSimular;
        // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import Actualizador.Data.*;
import Actualizador.Data.escribirAlineaciones.*;
import AlineacionAlAzar.Data.Alineacion;
import AutoSimulacion.Data.*;
import java.awt.Dimension;
import java.io.*;
import java.util.*;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Antonio
 */
public class Actualizador extends javax.swing.JFrame {

        Contenedor liga = new Contenedor();
        ArrayList<ArchivosStt> estadisticas = new ArrayList();
        SEquipo equipoSemana;
        AlineacionAlAzar.Data.Equipo equipoAlineacion;
        AlineacionWriter aW = new AlineacionWriter();
        File miDir = new File(".");
        Calendario calendario;
        ArrayList<String> nombresArchivos = new ArrayList();

        /**
         * Creates new form Actualizador
         */
        private void cargarDatosActualizador() throws IOException, IOException {
                liga.cargarDatos();
                FileReader stats = new FileReader("stats.dir");
                BufferedReader bR = new BufferedReader(stats);
                String s;
                nombresArchivos = new ArrayList();
                while ((s = bR.readLine()) != null) {
                        nombresArchivos.add(s.replace(".stt", ".txt"));
                        FileReader archivo = new FileReader(s);
                        BufferedReader bArchivo = new BufferedReader(archivo);
                        estadisticas.add(new ArchivosStt(bArchivo, liga));
                }
        }

        public Actualizador() throws IOException {
                initComponents();
                jLog.setText("");

                panelActualizador.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Actualizador", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Calibri", 1, 14)));
                panelAlineacion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Alineacion al azarr", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Calibri", 1, 14)));
                panelSimulador.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Simulador Automatico", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Calibri", 1, 14)));

                try {
                        String s;

                        // CARGA DE DATOS DE LA PARTE DEL ALINEADOR AL AZAR
                        selectorTactica.removeAllItems();
                        selectorTactica.addItem("A");
                        selectorTactica.addItem("C");
                        selectorTactica.addItem("D");
                        selectorTactica.addItem("E");
                        selectorTactica.addItem("L");
                        selectorTactica.addItem("N");
                        selectorTactica.addItem("P");
                        FileReader teams = new FileReader("teams.dir");
                        BufferedReader bR2 = new BufferedReader(teams);
                        while ((s = bR2.readLine()) != null) {
                                selectorEquipo.addItem(s);
                        }

                        // CARGA DE DATOS DE LA AUTO SIMULACIÓN
                        calendario = new Calendario();

                        // CARGA DE DATOS DE LA PARTE DEL ACTUALIZADOR
                        cargarDatosActualizador();

                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                }

                this.setSize(new Dimension(900, 700));
                this.setLocationRelativeTo(null);
        }

        /**
         * This method is called from within the constructor to
         * initialize the form. WARNING: Do NOT modify this code. The
         * content of this method is always regenerated by the Form
         * Editor.
         */
        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {
                java.awt.GridBagConstraints gridBagConstraints;

                panelActualizador = new javax.swing.JPanel();
                actualizarLiga = new javax.swing.JButton();
                jScrollPane2 = new javax.swing.JScrollPane();
                jLog = new javax.swing.JTextArea();
                jSeparator1 = new javax.swing.JSeparator();
                jSeparator2 = new javax.swing.JSeparator();
                jSeparator3 = new javax.swing.JSeparator();
                jSeparator4 = new javax.swing.JSeparator();
                fitPorteros = new javax.swing.JButton();
                jDf = new javax.swing.JTextField();
                jDm = new javax.swing.JTextField();
                jMf = new javax.swing.JTextField();
                jAm = new javax.swing.JTextField();
                jFw = new javax.swing.JTextField();
                jSeparator9 = new javax.swing.JSeparator();
                jInfoDf = new javax.swing.JLabel();
                jInfoDm = new javax.swing.JLabel();
                jInfoMf = new javax.swing.JLabel();
                jInfoAm = new javax.swing.JLabel();
                jInfoFw = new javax.swing.JLabel();
                jSeparator10 = new javax.swing.JSeparator();
                jSeparator11 = new javax.swing.JSeparator();
                jTitulo = new javax.swing.JLabel();
                jNombreEquipo = new javax.swing.JTextField();
                jElegirNombreEquipo = new javax.swing.JLabel();
                panelAlineacion = new javax.swing.JPanel();
                selectorEquipo = new javax.swing.JComboBox<>();
                numDF = new javax.swing.JTextField();
                numDM = new javax.swing.JTextField();
                numMF = new javax.swing.JTextField();
                numAM = new javax.swing.JTextField();
                numFW = new javax.swing.JTextField();
                selectorTactica = new javax.swing.JComboBox<>();
                ali442L = new javax.swing.JButton();
                formacionAli = new javax.swing.JButton();
                randomAli = new javax.swing.JButton();
                jLabel1 = new javax.swing.JLabel();
                jLabel2 = new javax.swing.JLabel();
                jLabel3 = new javax.swing.JLabel();
                jLabel4 = new javax.swing.JLabel();
                jLabel5 = new javax.swing.JLabel();
                jLabel6 = new javax.swing.JLabel();
                jLabel7 = new javax.swing.JLabel();
                jLabel8 = new javax.swing.JLabel();
                fitMinimo = new javax.swing.JTextField();
                panelSimulador = new javax.swing.JPanel();
                elegirCalendario = new javax.swing.JButton();
                simularAutomaticamente = new javax.swing.JButton();
                elegirJornada = new javax.swing.JComboBox<>();
                ficheroSeleccionado = new javax.swing.JLabel();
                jLabel9 = new javax.swing.JLabel();
                jLabel10 = new javax.swing.JLabel();

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                getContentPane().setLayout(new java.awt.GridBagLayout());

                panelActualizador.setName(""); // NOI18N
                panelActualizador.setLayout(new java.awt.GridBagLayout());

                actualizarLiga.setText("Actualizar Liga");
                actualizarLiga.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                actualizarLigaActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.gridwidth = 7;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(2, 0, 2, 0);
                panelActualizador.add(actualizarLiga, gridBagConstraints);

                jLog.setColumns(20);
                jLog.setRows(5);
                jScrollPane2.setViewportView(jLog);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 11;
                gridBagConstraints.gridwidth = 11;
                gridBagConstraints.gridheight = 10;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 1.3;
                gridBagConstraints.weighty = 2.1;
                panelActualizador.add(jScrollPane2, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 13;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weighty = 0.2;
                panelActualizador.add(jSeparator1, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridheight = 20;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.2;
                panelActualizador.add(jSeparator2, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 12;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridheight = 20;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.2;
                panelActualizador.add(jSeparator3, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 21;
                gridBagConstraints.gridwidth = 13;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weighty = 0.2;
                panelActualizador.add(jSeparator4, gridBagConstraints);

                fitPorteros.setText("Fit a 100 (porteros)");
                fitPorteros.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                fitPorterosActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.gridwidth = 5;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(2, 0, 5, 0);
                panelActualizador.add(fitPorteros, gridBagConstraints);

                jDf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
                jDf.setText("4");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 0.3;
                gridBagConstraints.weighty = 0.1;
                panelActualizador.add(jDf, gridBagConstraints);

                jDm.setHorizontalAlignment(javax.swing.JTextField.CENTER);
                jDm.setText("1");
                jDm.setToolTipText("");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 0.3;
                gridBagConstraints.weighty = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 20);
                panelActualizador.add(jDm, gridBagConstraints);

                jMf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
                jMf.setText("2");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 0.3;
                gridBagConstraints.weighty = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
                panelActualizador.add(jMf, gridBagConstraints);

                jAm.setHorizontalAlignment(javax.swing.JTextField.CENTER);
                jAm.setText("1");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 7;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 0.3;
                gridBagConstraints.weighty = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 21);
                panelActualizador.add(jAm, gridBagConstraints);

                jFw.setHorizontalAlignment(javax.swing.JTextField.CENTER);
                jFw.setText("2");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 9;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weightx = 0.3;
                gridBagConstraints.weighty = 0.1;
                panelActualizador.add(jFw, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.gridwidth = 11;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weighty = 0.1;
                panelActualizador.add(jSeparator9, gridBagConstraints);

                jInfoDf.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jInfoDf.setText("DF");
                jInfoDf.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weighty = 0.1;
                panelActualizador.add(jInfoDf, gridBagConstraints);

                jInfoDm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jInfoDm.setText("DM");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weighty = 0.1;
                panelActualizador.add(jInfoDm, gridBagConstraints);

                jInfoMf.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jInfoMf.setText("MF");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 5;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weighty = 0.1;
                panelActualizador.add(jInfoMf, gridBagConstraints);

                jInfoAm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jInfoAm.setText("AM");
                jInfoAm.setToolTipText("");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 7;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weighty = 0.1;
                panelActualizador.add(jInfoAm, gridBagConstraints);

                jInfoFw.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jInfoFw.setText("FW");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 9;
                gridBagConstraints.gridy = 5;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.weighty = 0.1;
                panelActualizador.add(jInfoFw, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 11;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weighty = 0.1;
                panelActualizador.add(jSeparator10, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 11;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weighty = 0.1;
                panelActualizador.add(jSeparator11, gridBagConstraints);

                jTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jTitulo.setText("Elige la formación usada para el 11 de la jornada");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 13;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weighty = 0.1;
                panelActualizador.add(jTitulo, gridBagConstraints);

                jNombreEquipo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
                jNombreEquipo.setText("Equipo de la semana");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 2;
                gridBagConstraints.gridwidth = 11;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(5, 3, 5, 3);
                panelActualizador.add(jNombreEquipo, gridBagConstraints);

                jElegirNombreEquipo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
                jElegirNombreEquipo.setText("Elige el nombre del equipo de la jornada");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 11;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                gridBagConstraints.insets = new java.awt.Insets(8, 6, 8, 6);
                panelActualizador.add(jElegirNombreEquipo, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.2;
                gridBagConstraints.weighty = 0.1;
                getContentPane().add(panelActualizador, gridBagConstraints);

                panelAlineacion.setLayout(new java.awt.GridBagLayout());

                selectorEquipo.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                selectorEquipoActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.gridwidth = 7;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 15, 20);
                panelAlineacion.add(selectorEquipo, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 15, 0);
                panelAlineacion.add(numDF, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 15, 0);
                panelAlineacion.add(numDM, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 15, 0);
                panelAlineacion.add(numMF, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 15, 0);
                panelAlineacion.add(numAM, gridBagConstraints);
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.insets = new java.awt.Insets(0, 10, 15, 10);
                panelAlineacion.add(numFW, gridBagConstraints);

                selectorTactica.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(0, 9, 15, 20);
                panelAlineacion.add(selectorTactica, gridBagConstraints);

                ali442L.setText("Alineación al azar (4-4-2 L)");
                ali442L.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                ali442LActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 10;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                panelAlineacion.add(ali442L, gridBagConstraints);

                formacionAli.setText("Alineación al azar (formación elegida)");
                formacionAli.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                formacionAliActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 9;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                panelAlineacion.add(formacionAli, gridBagConstraints);

                randomAli.setText("Alineacion al Azar (formación aleatoria)");
                randomAli.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                randomAliActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 8;
                gridBagConstraints.gridwidth = 4;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                panelAlineacion.add(randomAli, gridBagConstraints);

                jLabel1.setText("Num DF");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                gridBagConstraints.insets = new java.awt.Insets(0, 20, 10, 0);
                panelAlineacion.add(jLabel1, gridBagConstraints);

                jLabel2.setText("Num DM");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
                panelAlineacion.add(jLabel2, gridBagConstraints);

                jLabel3.setText("Num MF");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
                panelAlineacion.add(jLabel3, gridBagConstraints);

                jLabel4.setText("Num AM");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 3;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
                panelAlineacion.add(jLabel4, gridBagConstraints);

                jLabel5.setText("Num FW");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 4;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 0);
                panelAlineacion.add(jLabel5, gridBagConstraints);

                jLabel6.setText("Tactica");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 6;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 20);
                panelAlineacion.add(jLabel6, gridBagConstraints);

                jLabel7.setText("Elige el equipo del que hacer la alineación");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 7;
                gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 20);
                panelAlineacion.add(jLabel7, gridBagConstraints);

                jLabel8.setText("Fit minimo");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 2;
                panelAlineacion.add(jLabel8, gridBagConstraints);

                fitMinimo.setText("70");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 2;
                gridBagConstraints.gridy = 7;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
                panelAlineacion.add(fitMinimo, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.weighty = 0.1;
                getContentPane().add(panelAlineacion, gridBagConstraints);

                panelSimulador.setLayout(new java.awt.GridBagLayout());

                elegirCalendario.setText("Cargar Calendario");
                elegirCalendario.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                elegirCalendarioActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 5);
                panelSimulador.add(elegirCalendario, gridBagConstraints);

                simularAutomaticamente.setText("Simular");
                simularAutomaticamente.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                simularAutomaticamenteActionPerformed(evt);
                        }
                });
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 6;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.insets = new java.awt.Insets(11, 0, 5, 0);
                panelSimulador.add(simularAutomaticamente, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 4;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
                panelSimulador.add(elegirJornada, gridBagConstraints);

                ficheroSeleccionado.setText("Calendario sin cargar");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 1;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
                panelSimulador.add(ficheroSeleccionado, gridBagConstraints);

                jLabel9.setText("Elige la jornada a simular");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 3;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.insets = new java.awt.Insets(10, 0, 11, 0);
                panelSimulador.add(jLabel9, gridBagConstraints);

                jLabel10.setText("Elige el fichero donde se encuentra el calendario");
                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 0;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.gridwidth = 2;
                gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
                panelSimulador.add(jLabel10, gridBagConstraints);

                gridBagConstraints = new java.awt.GridBagConstraints();
                gridBagConstraints.gridx = 1;
                gridBagConstraints.gridy = 0;
                gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
                gridBagConstraints.weightx = 0.1;
                gridBagConstraints.weighty = 0.1;
                getContentPane().add(panelSimulador, gridBagConstraints);

                pack();
        }// </editor-fold>//GEN-END:initComponents

        private void actualizarLigaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarLigaActionPerformed
                FileWriter subidas = null;
                FileReader reports = null;
                try {
                        String[] formacionElegidaStr = {jDf.getText(), jDm.getText(), jMf.getText(), jAm.getText(), jFw.getText()};
                        int[] formacionElegida = new int[5];
                        for (int i = 0; i < formacionElegida.length; i++) {
                                formacionElegida[i] = Integer.parseInt(formacionElegidaStr[i]);
                        }
                        if (sumarElementosArray(formacionElegida) != 10) {
                                throw new Exception("La suma de los jugadores elegidos tiene que ser 10");
                        }
                        FileReader ratings = new FileReader("ratings.txt");
                        BufferedReader bR2 = new BufferedReader(ratings);
                        equipoSemana = new SEquipo(liga, bR2, jNombreEquipo.getText());
                        reports = new FileReader("reports.txt");
                        BufferedReader bR = new BufferedReader(reports);
                        subidas = new FileWriter("resumen.txt", true);
                        BufferedWriter bW = new BufferedWriter(subidas);
                        PrintWriter pW = new PrintWriter(bW);
                        String[] sancionesYLesiones = new String[2];
                        sancionesYLesiones[0] = "";
                        sancionesYLesiones[1] = "";
                        String sLog = jLog.getText();
                        pW.println("[spoiler=\"ESTADISTICAS\"]<pre>");
                        String s = "";
                        pW.println("[b]RESULTADOS DE LA JORNADA[/b]");
                        pW.println();
                        while ((s = bR.readLine()) != null) {
                                pW.println(s);
                        }
                        pW.println();
                        s = "";
                        for (ArchivosStt a : estadisticas) {
                                s += a.escribirSkillsch(a.jLocal, a.local);
                                sLog += "Actualizadas medias y experiencias: " + a.local.getAbrev() + ".txt\n";
                                s += a.escribirSkillsch(a.jVisitante, a.visitante);
                                sLog += "Actualizadas medias y experiencias: " + a.visitante.getAbrev() + ".txt\n";
                                jLog.setText(sLog);
                        }
                        String[] cadena = s.split("\n");
                        s = "";
                        for (ArchivosStt a : estadisticas) {
                                try {
                                        a.actualizarBase(25, liga, a.local, a.jLocal);
                                        sLog += "Actualizadas estadisticas y fit: " + a.local.getAbrev() + ".txt\n";
                                        a.actualizarBase(25, liga, a.visitante, a.jVisitante);
                                        sLog += "Actualizadas estadisticas y fit: " + a.visitante.getAbrev() + ".txt\n";
                                        jLog.setText(sLog);
                                } catch (IOException ex) {
                                        jLog.setText("Error al actualizar las estadísticas: " + ex.getMessage());
                                }
                        }
                        pW.println();
                        pW.println("[b]MEDIAS[/b]");
                        pW.println();
                        for (int i = 0; i < cadena.length; i++) {
                                pW.println(cadena[i]);
                        }
                        pW.println();
                        pW.println("[b]LESIONES[/b]");
                        pW.println();
                        for (ArchivosStt a : estadisticas) {
                                sancionesYLesiones = a.escribirLesiones(a.local, a.jLocal, sancionesYLesiones);
                                sLog += "Actualizadas lesiones: " + a.local.getAbrev() + ".txt\n";
                                sancionesYLesiones = a.escribirLesiones(a.visitante, a.jVisitante, sancionesYLesiones);
                                sLog += "Actualizadas lesiones:  " + a.visitante.getAbrev() + ".txt\n";
                                jLog.setText(sLog);
                        }
                        s = sancionesYLesiones[0] + sancionesYLesiones[1];
                        cadena = s.split("\n");
                        for (int i = 0; i < cadena.length; i++) {
                                pW.println(cadena[i]);
                        }
                        pW.println();
                        sancionesYLesiones[0] = "";
                        sancionesYLesiones[1] = "";
                        s = "";
                        pW.println("[b]SANCIONES[/b]");
                        pW.println();
                        for (ArchivosStt a : estadisticas) {
                                sancionesYLesiones = a.escribirSanciones(a.local, a.jLocal, sancionesYLesiones);
                                sLog += "Actualizada s sanciones: " + a.local.getAbrev() + ".txt\n";
                                sancionesYLesiones = a.escribirSanciones(a.visitante, a.jVisitante, sancionesYLesiones);
                                sLog += "Actualizadas sanciones:  " + a.visitante.getAbrev() + ".txt\n";
                                jLog.setText(sLog);
                        }
                        s = sancionesYLesiones[0] + sancionesYLesiones[1];
                        cadena = s.split("\n");
                        for (int i = 0; i < cadena.length; i++) {
                                pW.println(cadena[i]);
                        }
                        pW.println();
                        pW.println("[b]EQUIPO DE LA SEMANA:[/b]");
                        pW.println();
                        String equipoSemanaStr = "";
                        equipoSemana.elegirAlineacion(formacionElegida);
                        equipoSemanaStr += aW.escribirFormacion(equipoSemana);
                        String[] equipoPorLineas = equipoSemanaStr.split("\\n");
                        for (String s2 : equipoPorLineas) {
                                pW.println(s2);
                        }
                        pW.println("</pre>[/spoiler]");
                        pW.println();
                        pW.close();
                        sLog += "Escogido equipo de la semana\n";
                        jLog.setText(sLog);
                        try {
                                liga.guardarEquipos();
                                sLog += "\n\n\n\n\n\nTODO ACTUALIZADO CORRECTAMENTE";
                                jLog.setText(sLog);
                        } catch (IOException ex) {
                                jLog.setText("Error, no se pudieron actualizar las plantillas: " + ex.getMessage());
                        }

                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                }
        }//GEN-LAST:event_actualizarLigaActionPerformed

        private void fitPorterosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fitPorterosActionPerformed
                for (Equipo e : liga.getEquipos()) {
                        for (Jugador j : e.getRoster()) {
                                if (j.getPosicion().equals(Jugador.Posicion.gk)) {
                                        j.getStats().setFit(100);
                                }
                        }
                }
                try {
                        liga.guardarEquipos();
                        jLog.setText("Fit de los porteros puesto a 100");
                } catch (IOException ex) {
                        jLog.setText("Error, no se pudieron actualizar las plantillas: " + ex.getMessage());
                }
        }//GEN-LAST:event_fitPorterosActionPerformed

        private void randomAliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomAliActionPerformed
                try {
                        int fit = Integer.parseInt(fitMinimo.getText());
                        Alineacion alineacion = new Alineacion(equipoAlineacion, fit);
                        alineacion.crearAlineacionRandom();
                        alineacion.escribirAlineacionEnFichero(false);
                } catch (IOException ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                }
        }//GEN-LAST:event_randomAliActionPerformed

        private void selectorEquipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorEquipoActionPerformed
                String team = selectorEquipo.getSelectedItem().toString();
                equipoAlineacion = new AlineacionAlAzar.Data.Equipo(team.substring(0, 3));
                try {
                        FileReader fichero = new FileReader(team);
                        BufferedReader bR = new BufferedReader(fichero);
                        bR.readLine();
                        bR.readLine();
                        String jugador;
                        while ((jugador = bR.readLine()) != null) {
                                AlineacionAlAzar.Data.Jugador j = new AlineacionAlAzar.Data.Jugador(jugador, team);
                                equipoAlineacion.anadirJugador(j);
                        }
                        bR.close();
                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                }
        }//GEN-LAST:event_selectorEquipoActionPerformed

        private void formacionAliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_formacionAliActionPerformed
                int nDefensa, nDm, nMf, nAm, nDelantero, fit, nJugadores;
                try {
                        nDefensa = Integer.parseInt(numDF.getText());
                        nDm = Integer.parseInt(numDM.getText());
                        nMf = Integer.parseInt(numMF.getText());
                        nAm = Integer.parseInt(numAM.getText());
                        nDelantero = Integer.parseInt(numFW.getText());
                        fit = Integer.parseInt(fitMinimo.getText());
                        nJugadores = nDefensa + nDm + nMf + nAm + nDelantero;
                        if (nJugadores != 10) {
                                throw new Exception("Se esperaban 10 jugadores, pero se han recibido " + nJugadores + " jugadores");
                        }
                        if (fit > 100) {
                                throw new Exception("El fit no puede ser mayor que 100");
                        }
                        Alineacion alineacion = new Alineacion(equipoAlineacion, nDefensa, nDm, nMf, nAm, nDelantero, (String) selectorTactica.getSelectedItem(), fit);
                        alineacion.crearAlineacionFormElegida();
                        alineacion.escribirAlineacionEnFichero(false);
                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                }

        }//GEN-LAST:event_formacionAliActionPerformed

        private void ali442LActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ali442LActionPerformed
                try {
                        Alineacion alineacion = new Alineacion(equipoAlineacion, 4, 0, 4, 0, 2, "L", 0);
                        alineacion.crearAlineacionFormElegida();
                        alineacion.escribirAlineacionEnFichero(true);
                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                }
        }//GEN-LAST:event_ali442LActionPerformed

        private void elegirCalendarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elegirCalendarioActionPerformed
                JFileChooser fc = new JFileChooser();
                fc.setCurrentDirectory(miDir);
                fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
                FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de texto", "txt");
                fc.setFileFilter(filtro);
                int seleccion = fc.showOpenDialog(this);
                if (seleccion == JFileChooser.APPROVE_OPTION) {
                        File fichero = fc.getSelectedFile();
                        ficheroSeleccionado.setText(fichero.getName());
                        try {
                                calendario.cargarCalendario(fichero);
                                for (int i = 1; i <= calendario.getCalendario().size(); i++) {
                                        elegirJornada.addItem(i + "");
                                }
                        } catch (Exception ex) {
                                JOptionPane.showMessageDialog(this, ex);
                        }
                }
        }//GEN-LAST:event_elegirCalendarioActionPerformed

        private void simularAutomaticamenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simularAutomaticamenteActionPerformed
                Simulacion simular = new Simulacion(calendario);
                int jornada = Integer.parseInt((String) elegirJornada.getSelectedItem());
                try {
                        simular.simular(jornada);
                        cargarDatosActualizador();
                        crearPosts();
                } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, ex.getMessage());
                }

        }//GEN-LAST:event_simularAutomaticamenteActionPerformed

        private int sumarElementosArray(int[] array) {
                int suma = 0;
                for (int i : array) {
                        suma += i;
                }
                return suma;
        }

        private void crearPosts() throws Exception {
                for (int i = 0; i < nombresArchivos.size() / 2; i++) {
                        FileWriter salida = new FileWriter("POST " + (i + 1) + ".txt");
                        PrintWriter pW = new PrintWriter(new BufferedWriter(salida));
                        pW.print("[spoiler=\"(" + nombresArchivos.get(2 * i).substring(0, 3) + ")-(" + nombresArchivos.get(2 * i).substring(4, 7) + ")\"]");
                        FileReader entrada = new FileReader(nombresArchivos.get(2 * i));
                        BufferedReader bR = new BufferedReader(entrada);
                        String s;
                        while ((s = bR.readLine()) != null) {
                                pW.println(s);
                        }
                        pW.print("</pre>[/spoiler]");
                        pW.println();
                        bR.close();
                        entrada.close();
                        if (i == ((nombresArchivos.size() / 2) - 1) && nombresArchivos.size() % 2 == 0) {
                                pW.print("[spoiler=\"(" + nombresArchivos.get(2 * i + 1).substring(0, 3) + ")-(" + nombresArchivos.get(2 * i + 1).substring(4, 7) + ")\"]");
                                entrada = new FileReader(nombresArchivos.get(2 * i + 1));
                                bR = new BufferedReader(entrada);
                                while ((s = bR.readLine()) != null) {
                                        pW.println(s);
                                }
                                pW.print("</pre>[/spoiler]");
                                bR.close();
                                entrada.close();
                        }
                        pW.close();
                        salida.close();
                }
        }

        /**
         * @param args the command line arguments
         */
        public static void main(String args[]) {
                /* Set the Nimbus look and feel */
                //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
                /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
                 */
                try {
                        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                                if ("Nimbus".equals(info.getName())) {
                                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                                        break;
                                }
                        }
                } catch (ClassNotFoundException ex) {
                        java.util.logging.Logger.getLogger(Actualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                        java.util.logging.Logger.getLogger(Actualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                        java.util.logging.Logger.getLogger(Actualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                } catch (javax.swing.UnsupportedLookAndFeelException ex) {
                        java.util.logging.Logger.getLogger(Actualizador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
                }
                //</editor-fold>

                /* Create and display the form */
                java.awt.EventQueue.invokeLater(new Runnable() {
                        public void run() {
                                try {
                                        new Actualizador().setVisible(true);
                                } catch (IOException ex) {
                                        System.out.println("Error");
                                }
                        }
                });
        }

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton actualizarLiga;
        private javax.swing.JButton ali442L;
        private javax.swing.JButton elegirCalendario;
        private javax.swing.JComboBox<String> elegirJornada;
        private javax.swing.JLabel ficheroSeleccionado;
        private javax.swing.JTextField fitMinimo;
        private javax.swing.JButton fitPorteros;
        private javax.swing.JButton formacionAli;
        private javax.swing.JTextField jAm;
        private javax.swing.JTextField jDf;
        private javax.swing.JTextField jDm;
        private javax.swing.JLabel jElegirNombreEquipo;
        private javax.swing.JTextField jFw;
        private javax.swing.JLabel jInfoAm;
        private javax.swing.JLabel jInfoDf;
        private javax.swing.JLabel jInfoDm;
        private javax.swing.JLabel jInfoFw;
        private javax.swing.JLabel jInfoMf;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel10;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JLabel jLabel4;
        private javax.swing.JLabel jLabel5;
        private javax.swing.JLabel jLabel6;
        private javax.swing.JLabel jLabel7;
        private javax.swing.JLabel jLabel8;
        private javax.swing.JLabel jLabel9;
        private javax.swing.JTextArea jLog;
        private javax.swing.JTextField jMf;
        private javax.swing.JTextField jNombreEquipo;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JSeparator jSeparator1;
        private javax.swing.JSeparator jSeparator10;
        private javax.swing.JSeparator jSeparator11;
        private javax.swing.JSeparator jSeparator2;
        private javax.swing.JSeparator jSeparator3;
        private javax.swing.JSeparator jSeparator4;
        private javax.swing.JSeparator jSeparator9;
        private javax.swing.JLabel jTitulo;
        private javax.swing.JTextField numAM;
        private javax.swing.JTextField numDF;
        private javax.swing.JTextField numDM;
        private javax.swing.JTextField numFW;
        private javax.swing.JTextField numMF;
        private javax.swing.JPanel panelActualizador;
        private javax.swing.JPanel panelAlineacion;
        private javax.swing.JPanel panelSimulador;
        private javax.swing.JButton randomAli;
        private javax.swing.JComboBox<String> selectorEquipo;
        private javax.swing.JComboBox<String> selectorTactica;
        private javax.swing.JButton simularAutomaticamente;
        // End of variables declaration//GEN-END:variables
}
